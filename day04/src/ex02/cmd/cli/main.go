// Code generated by go-swagger; DO NOT EDIT.

package main

import (
	"crypto/tls"
	"crypto/x509"
	"day04/ex02/client"
	"day04/ex02/client/operations"
	"fmt"
	httptransport "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/spf13/cobra"
	"io/ioutil"
	"log"
	"net/http"
	"os"
)

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

func main() {
	var host string
	var port int
	var candyType string
	var candyCount int64
	var money int64

	var rootCmd = &cobra.Command{
		Use:   "candy-client",
		Short: "Candy client for purchasing candy",
		Run: func(cmd *cobra.Command, args []string) {
			cert, err := tls.LoadX509KeyPair("cert/candy.tld/cert.pem", "cert/candy.tld/key.pem")
			if err != nil {
				log.Fatalf("Failed to load client certificate: %v", err)
			}

			caCert, err := ioutil.ReadFile("cert/minica.pem")
			if err != nil {
				log.Fatalf("Failed to read CA cert: %v", err)
			}

			caCertPool := x509.NewCertPool()
			caCertPool.AppendCertsFromPEM(caCert)

			tlsConfig := &tls.Config{
				Certificates: []tls.Certificate{cert},
				RootCAs:      caCertPool,
			}

			transport := &http.Transport{
				TLSClientConfig: tlsConfig,
			}

			httpClient := &http.Client{Transport: transport}

			transportConfig := httptransport.NewWithClient(fmt.Sprintf("%s:%d", host, port), "/", []string{"https"}, httpClient)

			c := client.New(transportConfig, strfmt.Default)

			params := operations.BuyCandyParams{
				Order: operations.BuyCandyBody{
					Money:      &money,
					CandyType:  &candyType,
					CandyCount: &candyCount,
				},
			}

			resp, err := c.Operations.BuyCandy(&params)
			if err != nil {
				fmt.Println("Error:", err)
				os.Exit(1)
			}

			fmt.Printf("%s Your change is %d\n", resp.Payload.Thanks, resp.Payload.Change)
		},
	}

	rootCmd.Flags().StringVarP(&candyType, "candyType", "k", "", "Type of candy")
	rootCmd.Flags().Int64VarP(&candyCount, "candyCount", "c", 0, "Count of candy")
	rootCmd.Flags().Int64VarP(&money, "money", "m", 0, "Amount of money")
	rootCmd.Flags().StringVar(&host, "host", "localhost", "Server host")
	rootCmd.Flags().IntVar(&port, "port", 8080, "Server port")

	if err := rootCmd.Execute(); err != nil {
		fmt.Println("Error executing command:", err)
		os.Exit(1)
	}
}


// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"day04/ex00/client/operations"
	"encoding/json"
	"fmt"

	"github.com/go-openapi/swag"
	"github.com/spf13/cobra"
)

// makeOperationOperationsBuyCandyCmd returns a command to handle operation buyCandy
func makeOperationOperationsBuyCandyCmd() (*cobra.Command, error) {
	cmd := &cobra.Command{
		Use:   "buyCandy",
		Short: ``,
		RunE:  runOperationOperationsBuyCandy,
	}

	if err := registerOperationOperationsBuyCandyParamFlags(cmd); err != nil {
		return nil, err
	}

	return cmd, nil
}

// runOperationOperationsBuyCandy uses cmd flags to call endpoint api
func runOperationOperationsBuyCandy(cmd *cobra.Command, args []string) error {
	appCli, err := makeClient(cmd, args)
	if err != nil {
		return err
	}
	// retrieve flag values from cmd and fill params
	params := operations.NewBuyCandyParams()
	if err, _ = retrieveOperationOperationsBuyCandyOrderFlag(params, "", cmd); err != nil {
		return err
	}
	if dryRun {
		logDebugf("dry-run flag specified. Skip sending request.")
		return nil
	}
	// make request and then print result
	msgStr, err := parseOperationOperationsBuyCandyResult(appCli.Operations.BuyCandy(params))
	if err != nil {
		return err
	}

	if !debug {
		fmt.Println(msgStr)
	}

	return nil
}

// registerOperationOperationsBuyCandyParamFlags registers all flags needed to fill params
func registerOperationOperationsBuyCandyParamFlags(cmd *cobra.Command) error {
	if err := registerOperationOperationsBuyCandyOrderParamFlags("", cmd); err != nil {
		return err
	}
	return nil
}

func registerOperationOperationsBuyCandyOrderParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	var flagOrderName string
	if cmdPrefix == "" {
		flagOrderName = "order"
	} else {
		flagOrderName = fmt.Sprintf("%v.order", cmdPrefix)
	}

	_ = cmd.PersistentFlags().String(flagOrderName, "", `Optional json string for [order]. summary of the candy order`)

	// add flags for body
	if err := registerModelBuyCandyBodyFlags(0, "buyCandyBody", cmd); err != nil {
		return err
	}

	return nil
}

func retrieveOperationOperationsBuyCandyOrderFlag(m *operations.BuyCandyParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("order") {
		// Read order string from cmd and unmarshal
		flagOrderValueStr, err := cmd.Flags().GetString("order")
		if err != nil {
			return err, false
		}

		flagOrderValue := operations.BuyCandyBody{}
		if err := json.Unmarshal([]byte(flagOrderValueStr), &flagOrderValue); err != nil {
			return fmt.Errorf("cannot unmarshal order string in BuyCandyBody: %v", err), false
		}
		m.Order = flagOrderValue
	}
	flagOrderModel := m.Order
	if swag.IsZero(flagOrderModel) {
		flagOrderModel = operations.BuyCandyBody{}
	}
	err, added := retrieveModelBuyCandyBodyFlags(0, &flagOrderModel, "buyCandyBody", cmd)
	if err != nil {
		return err, false
	}
	if added {
		m.Order = flagOrderModel
	}

	if dryRun && debug {
		flagOrderValueDebugBytes, err := json.Marshal(m.Order)
		if err != nil {
			return err, false
		}
		logDebugf("Order dry-run payload: %v", string(flagOrderValueDebugBytes))
	}

	retAdded = retAdded || added

	return nil, retAdded
}

// parseOperationOperationsBuyCandyResult parses request result and return the string content
func parseOperationOperationsBuyCandyResult(resp0 *operations.BuyCandyCreated, respErr error) (string, error) {
	if respErr != nil {

		var iResp0 interface{} = respErr
		resp0, ok := iResp0.(*operations.BuyCandyCreated)
		if ok {
			if !swag.IsZero(resp0) && !swag.IsZero(resp0.Payload) {
				msgStr, err := json.Marshal(resp0.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		var iResp1 interface{} = respErr
		resp1, ok := iResp1.(*operations.BuyCandyBadRequest)
		if ok {
			if !swag.IsZero(resp1) && !swag.IsZero(resp1.Payload) {
				msgStr, err := json.Marshal(resp1.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		var iResp2 interface{} = respErr
		resp2, ok := iResp2.(*operations.BuyCandyPaymentRequired)
		if ok {
			if !swag.IsZero(resp2) && !swag.IsZero(resp2.Payload) {
				msgStr, err := json.Marshal(resp2.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		return "", respErr
	}

	if !swag.IsZero(resp0) && !swag.IsZero(resp0.Payload) {
		msgStr, err := json.Marshal(resp0.Payload)
		if err != nil {
			return "", err
		}
		return string(msgStr), nil
	}

	return "", nil
}

// register flags to command
func registerModelBuyCandyBadRequestBodyFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerBuyCandyBadRequestBodyPropError(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerBuyCandyBadRequestBodyPropError(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagErrorDescription := ``

	var flagErrorName string
	if cmdPrefix == "" {
		flagErrorName = "error"
	} else {
		flagErrorName = fmt.Sprintf("%v.error", cmdPrefix)
	}

	var flagErrorDefault string

	_ = cmd.PersistentFlags().String(flagErrorName, flagErrorDefault, flagErrorDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelBuyCandyBadRequestBodyFlags(depth int, m *operations.BuyCandyBadRequestBody, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, ErrorAdded := retrieveBuyCandyBadRequestBodyPropErrorFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || ErrorAdded

	return nil, retAdded
}

func retrieveBuyCandyBadRequestBodyPropErrorFlags(depth int, m *operations.BuyCandyBadRequestBody, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagErrorName := fmt.Sprintf("%v.error", cmdPrefix)
	if cmd.Flags().Changed(flagErrorName) {

		var flagErrorName string
		if cmdPrefix == "" {
			flagErrorName = "error"
		} else {
			flagErrorName = fmt.Sprintf("%v.error", cmdPrefix)
		}

		flagErrorValue, err := cmd.Flags().GetString(flagErrorName)
		if err != nil {
			return err, false
		}
		m.Error = flagErrorValue

		retAdded = true
	}

	return nil, retAdded
}

// register flags to command
func registerModelBuyCandyBodyFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerBuyCandyBodyPropCandyCount(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerBuyCandyBodyPropCandyType(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerBuyCandyBodyPropMoney(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerBuyCandyBodyPropCandyCount(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagCandyCountDescription := `Required. number of candy`

	var flagCandyCountName string
	if cmdPrefix == "" {
		flagCandyCountName = "candyCount"
	} else {
		flagCandyCountName = fmt.Sprintf("%v.candyCount", cmdPrefix)
	}

	var flagCandyCountDefault int64

	_ = cmd.PersistentFlags().Int64(flagCandyCountName, flagCandyCountDefault, flagCandyCountDescription)

	return nil
}

func registerBuyCandyBodyPropCandyType(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagCandyTypeDescription := `Required. kind of candy`

	var flagCandyTypeName string
	if cmdPrefix == "" {
		flagCandyTypeName = "candyType"
	} else {
		flagCandyTypeName = fmt.Sprintf("%v.candyType", cmdPrefix)
	}

	var flagCandyTypeDefault string

	_ = cmd.PersistentFlags().String(flagCandyTypeName, flagCandyTypeDefault, flagCandyTypeDescription)

	return nil
}

func registerBuyCandyBodyPropMoney(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagMoneyDescription := `Required. amount of money put into vending machine`

	var flagMoneyName string
	if cmdPrefix == "" {
		flagMoneyName = "money"
	} else {
		flagMoneyName = fmt.Sprintf("%v.money", cmdPrefix)
	}

	var flagMoneyDefault int64

	_ = cmd.PersistentFlags().Int64(flagMoneyName, flagMoneyDefault, flagMoneyDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelBuyCandyBodyFlags(depth int, m *operations.BuyCandyBody, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, CandyCountAdded := retrieveBuyCandyBodyPropCandyCountFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || CandyCountAdded

	err, CandyTypeAdded := retrieveBuyCandyBodyPropCandyTypeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || CandyTypeAdded

	err, MoneyAdded := retrieveBuyCandyBodyPropMoneyFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || MoneyAdded

	return nil, retAdded
}

func retrieveBuyCandyBodyPropCandyCountFlags(depth int, m *operations.BuyCandyBody, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagCandyCountName := fmt.Sprintf("%v.candyCount", cmdPrefix)
	if cmd.Flags().Changed(flagCandyCountName) {

		var flagCandyCountName string
		if cmdPrefix == "" {
			flagCandyCountName = "candyCount"
		} else {
			flagCandyCountName = fmt.Sprintf("%v.candyCount", cmdPrefix)
		}

		flagCandyCountValue, err := cmd.Flags().GetInt64(flagCandyCountName)
		if err != nil {
			return err, false
		}
		m.CandyCount = &flagCandyCountValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveBuyCandyBodyPropCandyTypeFlags(depth int, m *operations.BuyCandyBody, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagCandyTypeName := fmt.Sprintf("%v.candyType", cmdPrefix)
	if cmd.Flags().Changed(flagCandyTypeName) {

		var flagCandyTypeName string
		if cmdPrefix == "" {
			flagCandyTypeName = "candyType"
		} else {
			flagCandyTypeName = fmt.Sprintf("%v.candyType", cmdPrefix)
		}

		flagCandyTypeValue, err := cmd.Flags().GetString(flagCandyTypeName)
		if err != nil {
			return err, false
		}
		m.CandyType = &flagCandyTypeValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveBuyCandyBodyPropMoneyFlags(depth int, m *operations.BuyCandyBody, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagMoneyName := fmt.Sprintf("%v.money", cmdPrefix)
	if cmd.Flags().Changed(flagMoneyName) {

		var flagMoneyName string
		if cmdPrefix == "" {
			flagMoneyName = "money"
		} else {
			flagMoneyName = fmt.Sprintf("%v.money", cmdPrefix)
		}

		flagMoneyValue, err := cmd.Flags().GetInt64(flagMoneyName)
		if err != nil {
			return err, false
		}
		m.Money = &flagMoneyValue

		retAdded = true
	}

	return nil, retAdded
}

// register flags to command
func registerModelBuyCandyCreatedBodyFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerBuyCandyCreatedBodyPropChange(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerBuyCandyCreatedBodyPropThanks(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerBuyCandyCreatedBodyPropChange(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagChangeDescription := ``

	var flagChangeName string
	if cmdPrefix == "" {
		flagChangeName = "change"
	} else {
		flagChangeName = fmt.Sprintf("%v.change", cmdPrefix)
	}

	var flagChangeDefault int64

	_ = cmd.PersistentFlags().Int64(flagChangeName, flagChangeDefault, flagChangeDescription)

	return nil
}

func registerBuyCandyCreatedBodyPropThanks(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagThanksDescription := ``

	var flagThanksName string
	if cmdPrefix == "" {
		flagThanksName = "thanks"
	} else {
		flagThanksName = fmt.Sprintf("%v.thanks", cmdPrefix)
	}

	var flagThanksDefault string

	_ = cmd.PersistentFlags().String(flagThanksName, flagThanksDefault, flagThanksDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelBuyCandyCreatedBodyFlags(depth int, m *operations.BuyCandyCreatedBody, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, ChangeAdded := retrieveBuyCandyCreatedBodyPropChangeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || ChangeAdded

	err, ThanksAdded := retrieveBuyCandyCreatedBodyPropThanksFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || ThanksAdded

	return nil, retAdded
}

func retrieveBuyCandyCreatedBodyPropChangeFlags(depth int, m *operations.BuyCandyCreatedBody, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagChangeName := fmt.Sprintf("%v.change", cmdPrefix)
	if cmd.Flags().Changed(flagChangeName) {

		var flagChangeName string
		if cmdPrefix == "" {
			flagChangeName = "change"
		} else {
			flagChangeName = fmt.Sprintf("%v.change", cmdPrefix)
		}

		flagChangeValue, err := cmd.Flags().GetInt64(flagChangeName)
		if err != nil {
			return err, false
		}
		m.Change = flagChangeValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveBuyCandyCreatedBodyPropThanksFlags(depth int, m *operations.BuyCandyCreatedBody, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagThanksName := fmt.Sprintf("%v.thanks", cmdPrefix)
	if cmd.Flags().Changed(flagThanksName) {

		var flagThanksName string
		if cmdPrefix == "" {
			flagThanksName = "thanks"
		} else {
			flagThanksName = fmt.Sprintf("%v.thanks", cmdPrefix)
		}

		flagThanksValue, err := cmd.Flags().GetString(flagThanksName)
		if err != nil {
			return err, false
		}
		m.Thanks = flagThanksValue

		retAdded = true
	}

	return nil, retAdded
}

// register flags to command
func registerModelBuyCandyPaymentRequiredBodyFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerBuyCandyPaymentRequiredBodyPropError(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerBuyCandyPaymentRequiredBodyPropError(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagErrorDescription := ``

	var flagErrorName string
	if cmdPrefix == "" {
		flagErrorName = "error"
	} else {
		flagErrorName = fmt.Sprintf("%v.error", cmdPrefix)
	}

	var flagErrorDefault string

	_ = cmd.PersistentFlags().String(flagErrorName, flagErrorDefault, flagErrorDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelBuyCandyPaymentRequiredBodyFlags(depth int, m *operations.BuyCandyPaymentRequiredBody, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, ErrorAdded := retrieveBuyCandyPaymentRequiredBodyPropErrorFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || ErrorAdded

	return nil, retAdded
}

func retrieveBuyCandyPaymentRequiredBodyPropErrorFlags(depth int, m *operations.BuyCandyPaymentRequiredBody, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagErrorName := fmt.Sprintf("%v.error", cmdPrefix)
	if cmd.Flags().Changed(flagErrorName) {

		var flagErrorName string
		if cmdPrefix == "" {
			flagErrorName = "error"
		} else {
			flagErrorName = fmt.Sprintf("%v.error", cmdPrefix)
		}

		flagErrorValue, err := cmd.Flags().GetString(flagErrorName)
		if err != nil {
			return err, false
		}
		m.Error = flagErrorValue

		retAdded = true
	}

	return nil, retAdded
}

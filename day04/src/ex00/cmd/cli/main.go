// Code generated by go-swagger; DO NOT EDIT.

package main

import (
	"fmt"
	httptransport "github.com/go-openapi/runtime/client"
	"github.com/spf13/cobra"
	"os"
	"day04/ex00/client"
	"day04/ex00/client/operations"
	"github.com/go-openapi/strfmt"
)

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command


func main() {
	var host string
	var port int
	var candyType string
	var candyCount int64
	var money int64

	rootCmd := &cobra.Command{
		Use:   "candy-client",
		Short: "Candy client CLI",
		RunE: func(cmd *cobra.Command, args []string) error {
			// Формируем URL для подключения к серверу
			serverURL := fmt.Sprintf("%s:%d", host, port)

			// Создаем клиент с учетом указанного хоста и порта
			transport := httptransport.New(serverURL, "", []string{"http"})
			c := client.New(transport, strfmt.Default)

			params := operations.BuyCandyParams{
				Order: operations.BuyCandyBody{
					Money:      &money,
					CandyType:  &candyType,
					CandyCount: &candyCount,
				},
			}

			resp, err := c.Operations.BuyCandy(&params)
			if err != nil {
				return fmt.Errorf("API request error: %w", err)
			}


			fmt.Printf("%s Your change is %d\n", resp.Payload.Thanks, resp.Payload.Change)

			return nil
		},
	}

	rootCmd.Flags().StringVarP(&candyType, "candyType", "k", "", "Type of candy")
	rootCmd.Flags().Int64VarP(&candyCount, "candyCount", "c", 0, "Count of candy")
	rootCmd.Flags().Int64VarP(&money, "money", "m", 0, "Amount of money")
	rootCmd.Flags().StringVar(&host, "host", "localhost", "Server host")
	rootCmd.Flags().IntVar(&port, "port", 8080, "Server port")
	rootCmd.MarkFlagRequired("candyType")
	rootCmd.MarkFlagRequired("candyCount")
	rootCmd.MarkFlagRequired("money")

	if err := rootCmd.Execute(); err != nil {
		fmt.Println("cmd execute error: ", err)
		os.Exit(1)
	}
}
